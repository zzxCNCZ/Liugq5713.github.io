(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{335:function(t,a,e){"use strict";e.r(a);var s=e(38),n=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("虽然 ElementUI 文档已经十分详细，但是难免会有一点点遗漏的地方。本文介绍了笔者使用 Element 的经验以及文档中忽略或简要介绍的内容。如果你有什么需要补充的，不妨评论区告诉我吧。")]),t._v(" "),e("h2",{attrs:{id:"element-使用技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#element-使用技巧","aria-hidden":"true"}},[t._v("#")]),t._v(" Element 使用技巧")]),t._v(" "),e("p",[t._v("我发现 Element 的代码会有很好的容错")]),t._v(" "),e("p",[e("code",[t._v("(arr || []).map()")])]),t._v(" "),e("p",[e("code",[t._v("(str|| '').length")])]),t._v(" "),e("h2",{attrs:{id:"官方-faq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#官方-faq","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://github.com/ElemeFE/element/blob/dev/FAQ.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方 FAQ"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("建议每一个使用 ElementUI 的人都取读一读，官方也很无奈啊。有些可能是被问烦了，有些还是真的挺有用的")]),t._v(" "),e("p",[t._v("eg: 给组件绑定的事件为什么无法触发？")]),t._v(" "),e("p",[t._v("在 Vue 2.0 中，为自定义组件绑定原生事件必须使用 .native 修饰符："),e("code",[t._v('<my-component @click.native="handleClick">Click Me</my-component>')])]),t._v(" "),e("p",[t._v("从易用性的角度出发，我们对 Button 组件进行了处理，使它可以监听 click 事件："),e("code",[t._v('<el-button @click="handleButtonClick">Click Me</el-button>')])]),t._v(" "),e("p",[t._v("但是对于其他组件，还是需要添加 .native 修饰符。")]),t._v(" "),e("h2",{attrs:{id:"input-实时响应用户的输入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-实时响应用户的输入","aria-hidden":"true"}},[t._v("#")]),t._v(" Input 实时响应用户的输入")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("el"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("input type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),t._v(" v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),t._v("  @change"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"change"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("el"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("input"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[t._v("使用 change 监听时，input 框的值改变不能触发 change 事件，但是这时如果是 input 输入框失焦确能触发事件。总的来说就是 change 事件只在 input 值改变并且失去焦点的时候才会触发，其它情况不触发事件")]),t._v(" "),e("p",[t._v("change 事件现在仅在输入框失去焦点或用户按下回车时触发，与原生 input 元素一致。如果需要实时响应用户的输入，可以使用 input 事件。")]),t._v(" "),e("p",[t._v("详见其"),e("a",{attrs:{href:"https://github.com/ElemeFE/element/blob/d41afe0183058876d1b2ebcbee82ed11a1029212/CHANGELOG.zh-CN.md#%E9%9D%9E%E5%85%BC%E5%AE%B9%E6%80%A7%E6%9B%B4%E6%96%B0-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("更新说明"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"input-使用-v-model-使用修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-使用-v-model-使用修饰符","aria-hidden":"true"}},[t._v("#")]),t._v(" Input 使用 v-model "),e("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用修饰符"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：")]),t._v(" "),e("p",[e("code",[t._v('<el-input v-model.trim="input" placeholder="请输入内容"></el-input>')])]),t._v(" "),e("p",[t._v("想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：")]),t._v(" "),e("p",[e("code",[t._v('<el-input type="number" v-model.number="numberValidateForm.age" autocomplete="off"></el-input>')])]),t._v(" "),e("h2",{attrs:{id:"表单验证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表单验证","aria-hidden":"true"}},[t._v("#")]),t._v(" 表单验证")]),t._v(" "),e("p",[t._v("ElementUI 表单验证使用"),e("a",{attrs:{href:"https://github.com/yiminghe/async-validator",target:"_blank",rel:"noopener noreferrer"}},[t._v("async-validator"),e("OutboundLink")],1),t._v("，表单元素的 type 有 string，number，boolean，method，regexp，integer，float，array，object，enum，date，url，hex，email")]),t._v(" "),e("p",[t._v("有些还是很常用的，比如 url 验证，date 验证，email 验证。但是文档里面没有写，我有时候会记不住。哈哈哈。所以我写了一个"),e("a",{attrs:{href:"https://so-easy.cc/vue-element-form-editor/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("表单代码生成器"),e("OutboundLink")],1),t._v("，这样就不用去记住了。")]),t._v(" "),e("h2",{attrs:{id:"select-远程搜索组件回显"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-远程搜索组件回显","aria-hidden":"true"}},[t._v("#")]),t._v(" select 远程搜索组件回显")]),t._v(" "),e("p",[t._v("element-ui 当你的选项是固定的时候，它会基于你选中的 value，回显对应的 label，但是远程搜索组件由于"),e("code",[t._v("options")]),t._v("不固定，回显就是一个问题。")]),t._v(" "),e("p",[t._v("解决的方法就是传入已选中的值的"),e("code",[t._v("options")]),t._v("传入，比如我有一个组件"),e("code",[t._v("ArticleSelect")]),t._v(" ，我选中的 id 值为 [ 1,2 ] ，如果不做处理的话，这个组件就不会回显。仅干巴巴的显示 1，2 两个 tag。但是我可以通过把选中的值的 "),e("code",[t._v("options")]),t._v("(值为"),e("code",[t._v("[{value:1,label:'第一篇'},{value:2,label:'第二篇'}]")]),t._v(") 传入这个组件，实现回显显示标题。")]),t._v(" "),e("p",[t._v("但，可能有人就问了，select 组件远程搜索 options 不是会随着搜索的关键词而动态变化么，为什么这样可以？我们看一下 ElementUI select 组件设置选中值的代码：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setSelected")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略不是多选的情况的代码")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多选")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意到这里是push操作")]),t._v("\n        result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOption")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("selected "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置完成之后重新计算选项框的高度")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$nextTick")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resetInputHeight")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("由代码可知， Element 设置 选中的值是一个 push 操作，所以 options 后续改变也不会影响我选中的值，完美解决了我的需求")]),t._v(" "),e("h2",{attrs:{id:"自定义-element-ui-样式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义-element-ui-样式","aria-hidden":"true"}},[t._v("#")]),t._v(" 自定义 element-ui 样式")]),t._v(" "),e("blockquote",[e("p",[t._v("这一节我是从"),e("a",{attrs:{href:"https://panjiachen.github.io/vue-element-admin-site/zh/guide/essentials/style.html#%E8%87%AA%E5%AE%9A%E4%B9%89-element-ui-%E6%A0%B7%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),e("OutboundLink")],1),t._v("抄来的，就不自己写了")])]),t._v(" "),e("h3",{attrs:{id:"css-命名空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-命名空间","aria-hidden":"true"}},[t._v("#")]),t._v(" CSS 命名空间")]),t._v(" "),e("p",[t._v("现在我们来说说怎么覆盖 element-ui 样式。由于 element-ui 的样式我们是在全局引入的，所以你想在某个页面里面覆盖它的样式就不能加 scoped，但你又想只覆盖这个页面的 element 样式，你就可在它的父级加一个 class，用命名空间来解决问题。")]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".article-page")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 你的命名空间 */")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".el-tag")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* element-ui 元素*/")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin-right")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("当然也可以使用深度作用选择器 下文会介绍")]),t._v(" "),e("h3",{attrs:{id:"父组件改变子组件样式-深度选择器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父组件改变子组件样式-深度选择器","aria-hidden":"true"}},[t._v("#")]),t._v(" 父组件改变子组件样式 "),e("a",{attrs:{href:"https://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度选择器"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("当你子组件使用了 scoped 但在父组件又想修改子组件的样式可以，通过 >>> 来实现：")]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v("<style scoped>\n.a >>> .b")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n</style>\n")])])]),e("p",[t._v("将会编译成")]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".a[data-v-f3f3eg9] .b")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("如果你使用了一些预处理的东西，如 sass 你可以通过 /deep/ 来代替 >>> 实现想要的效果。")]),t._v(" "),e("p",[t._v("所以你想覆盖某个特定页面 element 的 button 的样式，你可以这样做：")]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".xxx-container >>> .el-button")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  xxxx\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"终极技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#终极技巧","aria-hidden":"true"}},[t._v("#")]),t._v(" 终极技巧")]),t._v(" "),e("p",[t._v("如果有时候你不幸遇到了 ElementUI 的 bug（虽然大部分情况是你自己的问题），给组件添加 key，更新 key 值，强制更新组件，一般可以解决问题。")])])},[],!1,null,null,null);a.default=n.exports}}]);