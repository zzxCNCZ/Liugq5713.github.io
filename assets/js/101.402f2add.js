(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{360:function(t,a,s){"use strict";s.r(a);var e=s(38),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),s("p",[t._v("config 配置有三种级别")]),t._v(" "),s("ul",[s("li",[t._v("system 级别，位于"),s("code",[t._v("/etc/gitconfig")])]),t._v(" "),s("li",[t._v("global（用户级别），位于"),s("code",[t._v("~/.gitconfig")]),t._v(" (或者"),s("code",[t._v("~/.config/git/config")]),t._v(")")]),t._v(" "),s("li",[t._v("local（当前仓库）")])]),t._v(" "),s("p",[t._v("设置优先级，从"),s("code",[t._v("local > global > system")])]),t._v(" "),s("p",[t._v("实测，github 客户端 的配置修改的是 global 的配置")]),t._v(" "),s("h2",{attrs:{id:"git-config-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-config-配置","aria-hidden":"true"}},[t._v("#")]),t._v(" git config 配置")]),t._v(" "),s("p",[t._v("很多人对于 git config 的配置止步于这两个命令")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git config --global user.name "myname"\ngit config --global user.email  "test@gmail.com"\n')])])]),s("h3",{attrs:{id:"git-如何统一换行符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-如何统一换行符","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 如何统一换行符")]),t._v(" "),s("p",[t._v('" LF 和 CRLF"')]),t._v(" "),s("p",[t._v("不同平台上，换行符发生改变时，Git 会认为整个文件被修改，这就造成我们没法 diff，不能正确反映本次的修改。还好 Git 在设计时就考虑了这一点，其提供了一个 autocrlf 的配置项，用于在提交和检出时自动转换换行符。但是 eslint 会检查你的换行符。所以干脆统一 LF 好了，在你的文本编辑器上，将文件的换行符设为 LF")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提交时转换为LF，检出时转换为CRLF")]),t._v("\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("autocrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提交时转换为LF，检出时不转换")]),t._v("\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("autocrlf input\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提交检出均不转换")]),t._v("\ngit config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("autocrlf "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),s("h3",{attrs:{id:"手动将-crlf-转化为-lf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手动将-crlf-转化为-lf","aria-hidden":"true"}},[t._v("#")]),t._v(" 手动将 CRLF 转化为 LF")]),t._v(" "),s("p",[t._v("dos2unix 转换工具。Windows 上 Git bash 客户端自带了该工具。其他系统上也可以安装该工具，随后输入该命令")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("find "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("type f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("exec dos2unix "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n")])])]),s("h3",{attrs:{id:"git-如何大小写敏感"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-如何大小写敏感","aria-hidden":"true"}},[t._v("#")]),t._v(" GIT 如何大小写敏感")]),t._v(" "),s("p",[t._v('"配置一下"\ngit config core.ignorecase false')])])},[],!1,null,null,null);a.default=n.exports}}]);