(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{325:function(t,a,s){"use strict";s.r(a);var e=s(38),r=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"基本类型-number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本类型-number","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本类型 Number")]),t._v(" "),s("blockquote",[s("p",[t._v("永远不要去判断某个特定的浮点数的值")])]),t._v(" "),s("h2",{attrs:{id:"存储方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储方式","aria-hidden":"true"}},[t._v("#")]),t._v(" 存储方式")]),t._v(" "),s("p",[t._v("数字类型是双精度浮点型("),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",target:"_blank",rel:"noopener noreferrer"}},[t._v("double-precision 64-bit binary format IEEE 754 value"),s("OutboundLink")],1),t._v(")，其值的范围在 -(2 的 53 次方-1) 和 2 的 53 次方-1 之间")]),t._v(" "),s("p",[t._v("数字类型有三个 symbolic 值:+Infinity, -Infinity 和 NaN (not-a-number)")]),t._v(" "),s("p",[s("code",[t._v("typeof NaN //'number'")]),t._v(" "),s("code",[t._v("typeof -Infinity // 'number'")])]),t._v(" "),s("h2",{attrs:{id:"类型转化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转化","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型转化")]),t._v(" "),s("ul",[s("li",[t._v("praseInt 最好提供基底 ps: ES3 引擎将 070 解释为八进制，但是 ES5 是直接解释为十进制的")])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("parseInt(string, radix)")]),t._v(" "),s("p",[t._v("parseInt(string, radix) 这个方法是一个将字符串转换为整数的方法，它有两个参数，第一个参数表示要转换的字符串，如果参数不是一个字符串，则将其转换为字符串。第二个参数是基数即进制，默认为 10")])]),t._v(" "),s("ul",[s("li",[t._v("parseFloat")]),t._v(" "),s("li",[t._v("Number")])]),t._v(" "),s("h2",{attrs:{id:"判断整数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断整数","aria-hidden":"true"}},[t._v("#")]),t._v(" 判断整数")]),t._v(" "),s("p",[s("code",[t._v("Number.isInteger(x)")])]),t._v(" "),s("h2",{attrs:{id:"取整"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取整","aria-hidden":"true"}},[t._v("#")]),t._v(" 取整")]),t._v(" "),s("ul",[s("li",[t._v("parseInt")])]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",[t._v("parseInt 方法取整数，有两个不好的地方，")]),t._v(" "),s("ol",[s("li",[t._v("parseInt 这个函数名，看起来就是将字符串转整数的，用在这里不是很适合")]),t._v(" "),s("li",[t._v("转字符串有点多此一举，而且肯定会带来性能开销，所以使用 parseInt 虽然方便，但不是最好的办法。")])]),t._v(" "),s("p",[t._v("这个 toString 不仅仅是“多此一举”，还可能导致严重的问题，比如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00000001")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000000000000000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),s("p",[t._v("这是因为，"),s("code",[t._v("0.00000001.toString() === 1e-8")]),t._v(" 而 "),s("code",[t._v("1000000000000000000000..toString() === 1e+21")]),t._v("。")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("使用 Math 方法")]),t._v(" "),s("p",[t._v("达到 parseInt 的结果，我们需要判断数值的符号，如果是负数，要使用 Math.ceil，如果是正数，则使用 Math.floor")]),t._v(" "),s("p",[t._v("在 ES2015 之后，还提供了原生的 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Math.trunc"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("位运算")]),t._v(" "),s("p",[s("code",[t._v("～～1.1 将会被转化为1")])])])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("位运算")]),t._v(" "),s("p",[t._v("按位操作符（Bitwise operators） 将其操作数（operands）当作 32 位的比特序列（由 0 和 1 组成）,即经位运算的数字将会转为最小位 -Math.pow(2,31),最大为 Math.pow(2,31)-1 的整数(-32768 到 32767),那么这种方法的缺陷就是它不能处理超过 32 位的数值取整")])]),t._v(" "),s("h2",{attrs:{id:"取小数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取小数","aria-hidden":"true"}},[t._v("#")]),t._v(" 取小数")]),t._v(" "),s("ul",[s("li",[t._v("先用 Math.trunc(num)取整，然后再与原数相减，就得到了小数部分")]),t._v(" "),s("li",[t._v("将原数对 1 取模，即可获得小数部分")]),t._v(" "),s("li",[t._v("字符串 split 方法")])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("取模运算%")]),t._v(" "),s("p",[t._v("JavaScript 的取模运算%并不限于整数运算，可以对浮点数取模。")])]),t._v(" "),s("h2",{attrs:{id:"判断数字极端情况下的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断数字极端情况下的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 判断数字极端情况下的方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("isNaN 判断该参数是否为数字")])]),t._v(" "),s("li",[s("p",[t._v("isFinite 检验参数是否是位于最大值和最小值之间")])]),t._v(" "),s("li",[s("p",[t._v("判断浮点数时候相等")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("floatEqual")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("abs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" dest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EPSILON")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量","aria-hidden":"true"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),s("blockquote",[s("p",[t._v("有些时候你会面临给一个变量初始化的情况，比起直接赋值一个具体的数，调用 js 本身的 API 我就觉得更好")])]),t._v(" "),s("ul",[s("li",[t._v("Number.NaN "),s("code",[t._v("Not-A-Number")])]),t._v(" "),s("li",[t._v("Number.MAX_SAFE_INTEGER "),s("code",[t._v("2^53 - 1")])]),t._v(" "),s("li",[t._v("Number.MAX_VALUE "),s("code",[t._v("approximately 1.79E+308")])]),t._v(" "),s("li",[t._v("Number.POSITIVE_INFINITY "),s("code",[t._v("无穷大")])])]),t._v(" "),s("h2",{attrs:{id:"tofixed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tofixed","aria-hidden":"true"}},[t._v("#")]),t._v(" toFixed")]),t._v(" "),s("blockquote",[s("p",[t._v("一个 Number 方法返回的是 String，理所当然的以为还是 Number，结果就失手了")])]),t._v(" "),s("p",[t._v("The toFixed() method formats a number using fixed-point notation and "),s("em",[t._v("return a string")]),t._v(" representing the given number using fixed-point notation.")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/akira-cn/FE_You_dont_know/issues/5",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何优雅地取数值的整数和小数部分"),s("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=r.exports}}]);