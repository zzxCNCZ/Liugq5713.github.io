(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{327:function(t,a,e){"use strict";e.r(a);var s=e(38),r=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"引用类型-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用类型-array","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用类型 Array")]),t._v(" "),e("h2",{attrs:{id:"检测是否是数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#检测是否是数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 检测是否是数组")]),t._v(" "),e("ul",[e("li",[t._v("instanceof")]),t._v(" "),e("li",[t._v("Array.isArray")]),t._v(" "),e("li",[t._v("Object.prototype.toString.call")])]),t._v(" "),e("h2",{attrs:{id:"对数组本身进行处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对数组本身进行处理","aria-hidden":"true"}},[t._v("#")]),t._v(" 对数组本身进行处理")]),t._v(" "),e("ul",[e("li",[t._v("Array.of\n创建数组，传入希望你在数组中包含的值")]),t._v(" "),e("li",[t._v("Array.from 将可迭代对象或类数组对象转变为真正的数组\n可以添加一个映射函数来加工数组")])]),t._v(" "),e("h2",{attrs:{id:"转换方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转换方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 转换方法")]),t._v(" "),e("ul",[e("li",[t._v("join")]),t._v(" "),e("li",[t._v("toString")]),t._v(" "),e("li",[t._v("toLocaleString")])]),t._v(" "),e("h2",{attrs:{id:"栈方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#栈方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 栈方法")]),t._v(" "),e("ul",[e("li",[t._v("push / pop")])]),t._v(" "),e("h2",{attrs:{id:"队列方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#队列方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 队列方法")]),t._v(" "),e("ul",[e("li",[t._v("unshift / shift")]),t._v(" "),e("li",[t._v("push")])]),t._v(" "),e("h2",{attrs:{id:"重排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 重排序")]),t._v(" "),e("ul",[e("li",[t._v("sort")]),t._v(" "),e("li",[t._v("reverse")])]),t._v(" "),e("h2",{attrs:{id:"位置方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位置方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 位置方法")]),t._v(" "),e("ul",[e("li",[t._v("indexOf / lastIndexOf\n局限：每次只能查找一个值")]),t._v(" "),e("li",[t._v("find / findIndex\n接受两个参数\n第一个是回调函数\n第二个参数是可选参数，用于指定回调函数里面 this 的值")])]),t._v(" "),e("h2",{attrs:{id:"操作方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 操作方法")]),t._v(" "),e("ul",[e("li",[t._v("concat")])]),t._v(" "),e("h3",{attrs:{id:"slice-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slice-方法","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",target:"_blank",rel:"noopener noreferrer"}},[t._v("slice 方法"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("将所有"),e("strong",[t._v("可枚举属性")]),t._v("的值从一个或多个源对象复制到目标对象（拷贝过程中将调用源对象的 getter 方法，并在 target 对象上使用 setter 方法实现目标对象的拷贝")]),t._v(" "),e("ul",[e("li",[t._v("splice")]),t._v(" "),e("li",[t._v("copyWithin\nparam : 该方法开始填充值得索引位置\nparam : 开始复制值得索引位置\nparam : 限制重写值得数量")]),t._v(" "),e("li",[t._v("fill\n用指定的值填充一至多个数组元素\neg : nums.fill(0,1,2) ,将数至 2 下标的元素填充")])]),t._v(" "),e("h2",{attrs:{id:"迭代"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代","aria-hidden":"true"}},[t._v("#")]),t._v(" 迭代")]),t._v(" "),e("ul",[e("li",[t._v("map : "),e("code",[t._v("create a new array")]),t._v(" with the results of calling a provided function on every element in the calling array")]),t._v(" "),e("li",[t._v("foreach : executes a provided function once for "),e("code",[t._v("each array element")])]),t._v(" "),e("li",[t._v("every : test whether "),e("code",[t._v("all elements")]),t._v(" in the array pass the test implemented by the provided function")]),t._v(" "),e("li",[t._v("some : test whether "),e("code",[t._v("at least")]),t._v(" one element in the array passes the test implemented by the provided function")]),t._v(" "),e("li",[t._v("filter : "),e("code",[t._v("create a new array")]),t._v(" with all elements that pass the test implemented by the provided function")]),t._v(" "),e("li",[t._v("reduce : executes a reducer function (that you provide) on each member of the array resulting in a single output value.")])]),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("map 和 forEach 无法跳出循环")]),t._v(" "),e("p",[t._v("解决方法就是使用数组的两个方法 some()与 every()：")]),t._v(" "),e("ol",[e("li",[t._v("some()当内部 return true 时跳出整个循环")]),t._v(" "),e("li",[t._v("every()当内部 return false 时跳出整个循环")])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError: Illegal break statement")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"归并方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#归并方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 归并方法")]),t._v(" "),e("ul",[e("li",[t._v("reduce / reduceRight")])]),t._v(" "),e("h2",{attrs:{id:"range-的左闭右开原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#range-的左闭右开原则","aria-hidden":"true"}},[t._v("#")]),t._v(" Range 的左闭右开原则")]),t._v(" "),e("p",[t._v("比如 Array.prototype.slice(begin,end)，包含 begin，不包含 end")]),t._v(" "),e("p",[t._v("这样做的好处如下：")]),t._v(" "),e("ul",[e("li",[t._v("上下界之差等于元素的数量")]),t._v(" "),e("li",[t._v("易于表示两个相邻子序列，一个子序列的上界就是另一个子序列的下界序列")]),t._v(" "),e("li",[t._v("从零（最小自然数）开始计数时，下界的下标不是 -1（非自然数）")]),t._v(" "),e("li",[t._v("表达空集时，不会使得上界小于下界")])]),t._v(" "),e("h2",{attrs:{id:"代码优化小细节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码优化小细节","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码优化小细节")]),t._v(" "),e("blockquote",[e("p",[t._v("这是我再看 ElementUI 源码看到的")])]),t._v(" "),e("p",[t._v("工作中我们经常使用数组操作，但是众所周知，后端数据不可信。你以为是个数组很可能是个"),e("code",[t._v("null")]),t._v("值")]),t._v(" "),e("p",[t._v("因此我们可以这样写数组操作，eg:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// some code")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])},[],!1,null,null,null);a.default=r.exports}}]);