(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{528:function(t,a,e){"use strict";e.r(a);var s=e(42),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"基础操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础操作"}},[t._v("#")]),t._v(" 基础操作")]),t._v(" "),e("h2",{attrs:{id:"tl-dr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tl-dr"}},[t._v("#")]),t._v(" TL;DR")]),t._v(" "),e("p",[t._v("我们日常使用 git 也就三个命令，"),e("code",[t._v("git add .")]),t._v(" "),e("code",[t._v("git commit -m 'xxx'")]),t._v(" "),e("code",[t._v("git push")]),t._v("，了解一下这三个命令干了啥，以及如何更好的使用这三个命令")]),t._v(" "),e("h2",{attrs:{id:"git-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-flow"}},[t._v("#")]),t._v(" git flow")]),t._v(" "),e("ul",[e("li",[t._v("working tree：持有实际文件")]),t._v(" "),e("li",[t._v("暂存区（stage 或者 index）：临时保存你的改动")])]),t._v(" "),e("p",[t._v("stage 在英文中除了有舞台、阶段之意外，还有作为动词的准备、筹划之意，所谓的暂存区就是一个为提交到版本库做准备的地方。那它为什么又被称作 index 呢？因为暂存区在物理上仅仅是.git 目录下的 index 二进制文件。它就是一个索引文件，将工作区中的文件和暂存区中的备份一一对应起来。")]),t._v(" "),e("ul",[e("li",[t._v("提交历史（Commit history），保存你 commit 提交上来的信息")])]),t._v(" "),e("h2",{attrs:{id:"git-add-vs-git-stage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-add-vs-git-stage"}},[t._v("#")]),t._v(" git add vs git stage")]),t._v(" "),e("p",[t._v("git stage 和 git add 一模一样，stage 相对语义化一点。")]),t._v(" "),e("p",[t._v("添加到暂存区其实包含两种操作。一种是将还未被 git 跟踪过的文件放入暂存区；一种是已经被 git 跟踪的文件，将有改动的内容放入暂存区。")]),t._v(" "),e("p",[e("code",[t._v("git add -u")])]),t._v(" "),e("p",[t._v("复制代码它和 git add -A 命令的区别在于，它只能将已加入暂存区文件的改动放入暂存区，而 git add -A 通吃两种情况。")]),t._v(" "),e("p",[t._v("你甚至可以将加入暂存区和提交一并做了")]),t._v(" "),e("p",[e("code",[t._v('git commit -am "commit for nothing"')])]),t._v(" "),e("p",[t._v("复制代码但是要注意，和 git add -u 命令一样，未跟踪的文件是无法提交上去的。")]),t._v(" "),e("h3",{attrs:{id:"git-暂存区的意义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-暂存区的意义"}},[t._v("#")]),t._v(" git 暂存区的意义")]),t._v(" "),e("ul",[e("li",[t._v("便于 track")]),t._v(" "),e("li",[t._v("选择性提交文件")]),t._v(" "),e("li",[t._v("提交历史更加的清晰")])]),t._v(" "),e("h2",{attrs:{id:"克隆一个带子模块的项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#克隆一个带子模块的项目"}},[t._v("#")]),t._v(" 克隆一个带子模块的项目")]),t._v(" "),e("p",[t._v("git clone 的下来的仓库含有子仓库怎么把子仓库拉取下来")]),t._v(" "),e("p",[t._v("这里你将克隆一个带子模块的项目。当你接收到这样一个项目，你将得到了包含子项目的目录，但里面没有文件：")]),t._v(" "),e("p",[t._v("必须要运行两个命令")]),t._v(" "),e("p",[t._v("git submodule init 来初始化你的本地配置文件，git submodule update 来从那个项目拉取所有数据并检出你上层项目里所列的合适的提交")]),t._v(" "),e("h2",{attrs:{id:"git-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),e("h3",{attrs:{id:"git-commit-accepts-several-message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-accepts-several-message"}},[t._v("#")]),t._v(" git commit accepts several message")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit title"')]),t._v(" -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit description"')]),t._v("\n")])])]),e("p",[t._v("or")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit title\n>\n> commit description"')]),t._v("\n")])])]),e("h3",{attrs:{id:"书写良好的-git-提交信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#书写良好的-git-提交信息"}},[t._v("#")]),t._v(" 书写良好的 Git 提交信息")]),t._v(" "),e("ul",[e("li",[t._v("feat (new feature)")]),t._v(" "),e("li",[t._v("fix (bug fix)")]),t._v(" "),e("li",[t._v("docs (changes to documentation)")]),t._v(" "),e("li",[t._v("style (formatting, missing semi colons, etc; no code change)")]),t._v(" "),e("li",[t._v("refactor (refactoring production code)")]),t._v(" "),e("li",[t._v("test (adding missing tests, refactoring tests; no production code change)")]),t._v(" "),e("li",[t._v("chore (updating grunt tasks etc; no production code change)")])]),t._v(" "),e("p",[t._v("常见的项目规范")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#type",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular 项目规范"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Commit message 和 Change log 编写指南"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"git-tag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://mohitkhare.me/blog/git-tags-explained/",target:"_blank",rel:"noopener noreferrer"}},[t._v("git tag"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"git-工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-工作流"}},[t._v("#")]),t._v(" git 工作流")]),t._v(" "),e("p",[t._v("一个大的项目 可能对一个功能有大量的修改。可以新建一个分支名为 someFeature , 然后将所有的更改分支都合并到这个分支上，最后将该分支合并到主分支")])])}),[],!1,null,null,null);a.default=i.exports}}]);