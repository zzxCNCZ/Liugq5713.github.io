(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{294:function(t,e,a){"use strict";a.r(e);var r=a(38),o=Object(r.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由","aria-hidden":"true"}},[t._v("#")]),t._v(" 路由")]),t._v(" "),a("h3",{attrs:{id:"服务端路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端路由","aria-hidden":"true"}},[t._v("#")]),t._v(" 服务端路由")]),t._v(" "),a("p",[t._v("每跳转到不同的 URL，都是重新访问服务端，然后服务端返回页面，页面也可以是服务端获取数据，然后和模板组合，返回 HTML，也可以是直接返回模板 HTML，然后由前端 JS 再去请求数据，使用前端模板和数据进行组合，生成想要的 HTML。")]),t._v(" "),a("h3",{attrs:{id:"前端路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端路由","aria-hidden":"true"}},[t._v("#")]),t._v(" 前端路由")]),t._v(" "),a("p",[t._v("每跳转到不同的 URL 都是使用前端的锚点路由，实际上只是 JS 根据 URL 来操作 DOM 元素，根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合，当然模板有可能是请求服务端返回的，这就是 SPA 单页程序。")]),t._v(" "),a("h4",{attrs:{id:"前端路由的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端路由的实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 前端路由的实现")]),t._v(" "),a("ol",[a("li",[t._v("是通过改变 hash 值，监听 onhashchange 事件，这种方式的优点是可以兼容低版本浏览器。Web 服务并不会解析 "),a("code",[t._v("hash")]),t._v("，也就是说 "),a("code",[t._v("#")]),t._v(" 后的内容 Web 服务都会自动忽略，但是 JavaScript 是可以通过 "),a("code",[t._v("window.location.hash")]),t._v(" 读取到的，读取到路径加以解析之后就可以响应不同路径的逻辑处理。")]),t._v(" "),a("li",[t._v("是通过 historyAPI ,监听 popState 事件，用 pushState 和 replaceState 来实现")])]),t._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("使用路由。却返回 can't get /route")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/32098076/react-router-cannot-get-except-for-root-url",target:"_blank",rel:"noopener noreferrer"}},[t._v("问题详情"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("http://10.0.0.1/about 这样的路由向服务器寻找资源，所以需设置 historyApiFallback 为 true 。当使用 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/History",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML5 History API"),a("OutboundLink")],1),t._v(" 时，任意的 "),a("code",[t._v("404")]),t._v(" 响应都可能需要被替代为 "),a("code",[t._v("index.html")]),t._v("。")])])])},[],!1,null,null,null);e.default=o.exports}}]);