(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{317:function(a,t,r){"use strict";r.r(t);var e=r(38),s=Object(e.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"面向对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向对象","aria-hidden":"true"}},[a._v("#")]),a._v(" 面向对象")]),a._v(" "),r("h2",{attrs:{id:"原型链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型链","aria-hidden":"true"}},[a._v("#")]),a._v(" 原型链")]),a._v(" "),r("p",[a._v("创建原型链对的最好的方式是：使用一个对象的实例作为另一个对象的原型")]),a._v(" "),r("h2",{attrs:{id:"创建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建")]),a._v(" "),r("p",[a._v("通过 Object 或者对象字面量可以用来创建单个对象，但是要创建很多个对象就不适合")]),a._v(" "),r("h3",{attrs:{id:"工厂模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 工厂模式")]),a._v(" "),r("p",[a._v("用函数来封装以特定接口创建对象的细节")]),a._v(" "),r("h3",{attrs:{id:"构造函数模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构造函数模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 构造函数模式")]),a._v(" "),r("p",[a._v("调用 new 会经历四个步骤")]),a._v(" "),r("p",[a._v("创建一个新对象")]),a._v(" "),r("p",[a._v("将 this 指向这个新对象")]),a._v(" "),r("p",[a._v("执行构造函数中的代码")]),a._v(" "),r("p",[a._v("返回新对象")]),a._v(" "),r("h3",{attrs:{id:"原型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 原型模式")]),a._v(" "),r("p",[a._v("将信息添加到原型对象中，可以共享属性和方法")]),a._v(" "),r("p",[a._v("组合使用构造函数模式和原型模式")]),a._v(" "),r("p",[a._v("构造函数模式定义实例属性")]),a._v(" "),r("p",[a._v("原型模式定义共享的属性与方法")]),a._v(" "),r("h3",{attrs:{id:"动态原型的模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态原型的模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 动态原型的模式")]),a._v(" "),r("p",[a._v("将原型也放在了构造函数里面")]),a._v(" "),r("h3",{attrs:{id:"创建的函数与构造函数之间没有什么关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建的函数与构造函数之间没有什么关系","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建的函数与构造函数之间没有什么关系")]),a._v(" "),r("ul",[r("li",[a._v("寄生构造函数模式")])]),a._v(" "),r("p",[a._v("创建一个函数，这个函数的作用仅仅是封装创建对象的代码")]),a._v(" "),r("ul",[r("li",[a._v("稳妥构造函数模式")])]),a._v(" "),r("h2",{attrs:{id:"继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),r("h3",{attrs:{id:"原型链-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型链-2","aria-hidden":"true"}},[a._v("#")]),a._v(" 原型链")]),a._v(" "),r("p",[a._v("每一个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。让原型对象等于另一个对象的实例")]),a._v(" "),r("h3",{attrs:{id:"借用构造函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#借用构造函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 借用构造函数")]),a._v(" "),r("h3",{attrs:{id:"组合继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组合继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 组合继承")]),a._v(" "),r("h3",{attrs:{id:"原型式继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型式继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 原型式继承")]),a._v(" "),r("h3",{attrs:{id:"寄生式继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#寄生式继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 寄生式继承")]),a._v(" "),r("h3",{attrs:{id:"寄生组合式继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#寄生组合式继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 寄生组合式继承")]),a._v(" "),r("h3",{attrs:{id:"面向对象的程序设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的程序设计","aria-hidden":"true"}},[a._v("#")]),a._v(" 面向对象的程序设计")])])},[],!1,null,null,null);t.default=s.exports}}]);